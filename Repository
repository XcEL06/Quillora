// üìÅ Folder Structure // quillora/ // ‚îú‚îÄ‚îÄ backend/ // ‚îÇ   ‚îú‚îÄ‚îÄ controllers/ // ‚îÇ   ‚îú‚îÄ‚îÄ models/ // ‚îÇ   ‚îú‚îÄ‚îÄ routes/ // ‚îÇ   ‚îú‚îÄ‚îÄ middleware/ // ‚îÇ   ‚îú‚îÄ‚îÄ config/ // ‚îÇ   ‚îî‚îÄ‚îÄ server.js // ‚îî‚îÄ‚îÄ frontend/ //     ‚îú‚îÄ‚îÄ public/ //     ‚îú‚îÄ‚îÄ src/ //     ‚îÇ   ‚îú‚îÄ‚îÄ components/ //     ‚îÇ   ‚îú‚îÄ‚îÄ pages/ //     ‚îÇ   ‚îú‚îÄ‚îÄ context/ //     ‚îÇ   ‚îú‚îÄ‚îÄ api/ //     ‚îÇ   ‚îú‚îÄ‚îÄ App.js //     ‚îÇ   ‚îî‚îÄ‚îÄ index.js

// ==================== BACKEND ====================

// üìÅ backend/config/db.js const mongoose = require('mongoose'); const connectDB = async () => { try { await mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true, }); console.log('MongoDB connected'); } catch (error) { console.error(error.message); process.exit(1); } }; module.exports = connectDB;

// üìÅ backend/models/User.js const mongoose = require('mongoose'); const userSchema = new mongoose.Schema({ username: String, email: String, password: String, avatar: String, bio: String, followers: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }], following: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }], role: { type: String, default: 'user' }, isBanned: { type: Boolean, default: false }, }); module.exports = mongoose.model('User', userSchema);

// üìÅ backend/models/Post.js const postSchema = new mongoose.Schema({ content: String, media: String, tags: [String], likes: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }], author: { type: mongoose.Schema.Types.ObjectId, ref: 'User' }, createdAt: { type: Date, default: Date.now }, }); module.exports = mongoose.model('Post', postSchema);

// üìÅ backend/controllers/userController.js const User = require('../models/User'); exports.register = async (req, res) => { /* handle registration / }; exports.login = async (req, res) => { / handle login / }; exports.profile = async (req, res) => { / handle profile */ };

// üìÅ backend/routes/userRoutes.js const express = require('express'); const router = express.Router(); const { register, login, profile } = require('../controllers/userController'); router.post('/register', register); router.post('/login', login); router.get('/profile/:id', profile); module.exports = router;

// üìÅ backend/server.js const express = require('express'); const app = express(); const dotenv = require('dotenv'); const connectDB = require('./config/db'); const http = require('http').createServer(app); const io = require('socket.io')(http, { cors: { origin: '*' }, }); dotenv.config(); connectDB();

app.use(express.json()); app.use('/api/users', require('./routes/userRoutes'));

io.on('connection', (socket) => { console.log('New client connected'); socket.on('sendMessage', (data) => { io.emit('newMessage', data); }); });

const PORT = process.env.PORT || 5000; http.listen(PORT, () => console.log(Server running on ${PORT}));

// ==================== FRONTEND ====================

// üìÅ frontend/src/api/api.js import axios from 'axios'; export const API = axios.create({ baseURL: 'http://localhost:5000/api' });

// üìÅ frontend/src/context/AuthContext.js import { createContext, useState, useEffect } from 'react'; export const AuthContext = createContext(); export const AuthProvider = ({ children }) => { const [user, setUser] = useState(null); return ( <AuthContext.Provider value={{ user, setUser }}> {children} </AuthContext.Provider> ); };

// üìÅ frontend/src/components/Navbar.js const Navbar = () => (<nav>Quillora | Home | Explore | Groups | Messages</nav>);

// üìÅ frontend/src/components/PostForm.js import { useState } from 'react'; const PostForm = () => { const [content, setContent] = useState(''); const handlePost = () => { /* Send post to API */ }; return ( <div> <textarea onChange={(e) => setContent(e.target.value)} /> <button onClick={handlePost}>Post</button> </div> ); };

// üìÅ frontend/src/pages/Home.js import PostForm from '../components/PostForm'; const Home = () => (

  <div>
    <h1>Home Feed</h1>
    <PostForm />
  </div>
);// üìÅ frontend/src/App.js import { BrowserRouter, Routes, Route } from 'react-router-dom'; import Home from './pages/Home'; import { AuthProvider } from './context/AuthContext'; function App() { return ( <BrowserRouter> <AuthProvider> <Routes> <Route path='/' element={<Home />} /> </Routes> </AuthProvider> </BrowserRouter> ); } export default App;

// üìÅ frontend/src/index.js import ReactDOM from 'react-dom/client'; import App from './App'; const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<App />);

// Continue with other features (chat UI, group system, explore, notifications...) in next steps. // Use Socket.IO client, Redux (if needed), and complete all components.

  // This is the full code base for Quillora - a social platform for creative sharing // Tech Stack: MERN + Socket.IO + Tailwind + MongoDB + JWT Auth + File Uploads // Folder structure: server/ for backend, client/ for frontend

// === SERVER (server/index.js) === const express = require('express'); const mongoose = require('mongoose'); const cors = require('cors'); const http = require('http'); const socketIO = require('socket.io'); const dotenv = require('dotenv'); const authRoutes = require('./routes/authRoutes'); const userRoutes = require('./routes/userRoutes'); const postRoutes = require('./routes/postRoutes'); const groupRoutes = require('./routes/groupRoutes'); const messageRoutes = require('./routes/messageRoutes'); const adminRoutes = require('./routes/adminRoutes');

dotenv.config(); const app = express(); const server = http.createServer(app); const io = socketIO(server, { cors: { origin: '*' } });

mongoose.connect(process.env.MONGO_URI) .then(() => console.log('MongoDB connected')) .catch(err => console.error(err));

app.use(cors()); app.use(express.json());

app.use('/api/auth', authRoutes); app.use('/api/users', userRoutes); app.use('/api/posts', postRoutes); app.use('/api/groups', groupRoutes); app.use('/api/messages', messageRoutes); app.use('/api/admin', adminRoutes);

io.on('connection', (socket) => { console.log('User connected:', socket.id); socket.on('joinRoom', (roomId) => socket.join(roomId)); socket.on('sendMessage', ({ roomId, message }) => { io.to(roomId).emit('receiveMessage', message); }); socket.on('typing', (roomId) => socket.to(roomId).emit('typing')); });

const PORT = process.env.PORT || 5000; server.listen(PORT, () => console.log(Server running on port ${PORT}));

// === CLIENT (client/src/App.jsx) === import React from 'react'; import { BrowserRouter as Router, Routes, Route } from 'react-router-dom'; import Home from './pages/Home'; import Login from './pages/Login'; import Register from './pages/Register'; import Feed from './pages/Feed'; import Profile from './pages/Profile'; import Groups from './pages/Groups'; import Messages from './pages/Messages'; import AdminDashboard from './pages/AdminDashboard';

export default function App() { return ( <Router> <Routes> <Route path='/' element={<Home />} /> <Route path='/login' element={<Login />} /> <Route path='/register' element={<Register />} /> <Route path='/feed' element={<Feed />} /> <Route path='/profile/:id' element={<Profile />} /> <Route path='/groups' element={<Groups />} /> <Route path='/messages' element={<Messages />} /> <Route path='/admin' element={<AdminDashboard />} /> </Routes> </Router> ); }

// More files are included in the next blocks (models, routes, pages, components) // This is the project shell. Next: build individual files and modules inside client and server.

// Continue to next block?

                                                                                                                                  
